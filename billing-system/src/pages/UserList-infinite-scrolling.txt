import React, {useEffect, useState, useRef, useCallback} from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import './UserList.css';

const UserList = () => {
  const navigate = useNavigate();
  const [users, setUsers] = useState([]); // State to hold user data
  const [loading, setLoading] = useState(true); // Loading indicator
  const [error, setError] = useState(null);

  const [page, setPage] = useState(1); 
  const [hasMore, setHasMore] = useState(true);
  const observer = useRef();

  const fetchUsers = useCallback(async () => {
    setLoading(true);
    try {
      const response = await axios.get(`/api/users-list?page=${page}&limit=10`);
      setUsers((prevUsers) => [...prevUsers, ...response.data.users]);
      setHasMore(page < response.data.totalPages); // Check if more pages are available
    } catch (error) {
      console.error('Error fetching users:', error);
      setError('Failed to fetch users.');
    } finally {
      setLoading(false);
    }
  }, [page]);

  useEffect(() => {
    fetchUsers();
  }, [fetchUsers]);

  const handleUserClick = (userId) => {
    navigate(`/user/${userId}`); // Navigate to dynamic route
  };

  const lastUserElementRef = useRef();
  useEffect(() => {
    if (loading) return;
    if (observer.current) observer.current.disconnect();

    observer.current = new IntersectionObserver((entries) => {
      if (entries[0].isIntersecting && hasMore) {
        setPage((prevPage) => prevPage + 1); // Increment page to fetch next set of users
      }
    });

    if (lastUserElementRef.current) {
      observer.current.observe(lastUserElementRef.current);
    }
  }, [loading, hasMore]);

  // if (loading) return <p>Loading users...</p>; // Show loading message
  if (error) return <p>{error}</p>; // Show error message

  return (
    <div className="user-list-container">
      <h2>Users</h2>
      <div className="user-stack">
        {users.map((user, index) => (
          <div 
            key={user.id} 
            className="user-card" 
            onClick={() => handleUserClick(user._id)}
            ref={index === users.length - 1 ? lastUserElementRef : null}
          >
            <div className="user-info">
              <p><strong>Name:</strong> {user.name}</p>
              <p><strong>Contact:</strong> {user.contactNo}</p>
              <p className="purchase"><strong>Total Purchase:</strong> ${user.totalPurchaseAmount.toFixed(2)}</p>
              <p className="pending"><strong>Pending Amount:</strong> ${user.totalPendingAmount.toFixed(2)}</p>
            </div>
          </div>
        ))}
      </div>
      {loading && <p>Loading more users...</p>} {/* Loading indicator */}
    </div>
  );
};

export default UserList;
